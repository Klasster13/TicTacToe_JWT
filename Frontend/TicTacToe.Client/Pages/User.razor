@page "/user"

@using TicTacToe.Client.Services

@inject NavigationManager Navigation
@inject RefreshDataService RefreshData
@inject HttpClient Http
@inject UserDataUpdateService UserUpdate
@inject ITokenStorageService TokenStorageService

@implements IDisposable


<div class="top-bar">    
    <a class="nav-btn" @onclick="LogOutHandler">Log out</a>
</div>

<div class="user-page-container">

    <div class="profile-sidebar">
        <UserProfileComponent 
            User="@user"
            OnTabButtonClick="SwitchTabHandler" />
    </div>
    
    <div class="main-content">        
        <div class="game-content">
            <MainContentComponent
                User="@user"
                CurrentTab="@currentTab"
                OnTabChange="SwitchTabHandler"/>
        </div>
    </div>
</div>



@code {
    private GameTab currentTab = GameTab.CreateGame;
    private UserResponse? user;

    protected override async Task OnInitializedAsync()
    {
        UserUpdate.OnUserUpdate += UpdateData;
        try
        {
            var isAccessTokenExist = await TokenStorageService.IsContainAccessTokenAsync();
            var isRefreshTokenExist = await TokenStorageService.IsContainRefreshTokenAsync();

            if (!isAccessTokenExist && !isRefreshTokenExist)
            {
                await LogOutHandler();
                return;
            }

            if (!isAccessTokenExist && isRefreshTokenExist)
            {
                var refreshToken = await TokenStorageService.GetRefreshTokenAsync();
                if (string.IsNullOrEmpty(refreshToken))
                {
                    throw new ArgumentNullException(nameof(refreshToken));
                }

                var response = await Http.PostAsJsonAsync("/auth/refresh-access", new RefreshJwtRequest { RefreshToken = refreshToken });
                if (response is null || !response.IsSuccessStatusCode)
                {
                    await LogOutHandler();
                    return;
                }

                var jwtResponse = await response.Content.ReadFromJsonAsync<JwtResponse>();
                if (jwtResponse is null)
                {
                    await LogOutHandler();
                    return;
                }

                await TokenStorageService.SetTokensAsync(jwtResponse.AccessToken, jwtResponse.RefreshToken);
                await GetCurrentUser();
                return;
            }

            await GetCurrentUser();
        }
        catch (Exception)
        {
            await LogOutHandler();
        }
    }


    private async Task GetCurrentUser()
    {
        user = await Http.GetFromJsonAsync<UserResponse>($"/user/current")
                ?? throw new ArgumentNullException();
    }


    private async Task LogOutHandler()
    {
        await TokenStorageService.ClearTokensAsync();
        Navigation.NavigateTo("/", forceLoad: true);
    }


    private async Task SwitchTabHandler(GameTab tab)
    {
        if (currentTab == tab)
        {
            if (currentTab == GameTab.JoinGame
                || currentTab == GameTab.MyGames
                || currentTab ==GameTab.Leaderboard)
            {
                await RefreshData.RefreshDataAsync();
            }
        }

        currentTab = tab;
        StateHasChanged();
    }

    private void UpdateData(UserResponse user)
    {
        this.user = user;
        StateHasChanged();
    }


    public void Dispose()
    {
        UserUpdate.OnUserUpdate -= UpdateData;
    }
}
