@page "/"
@rendermode RenderMode.InteractiveWebAssembly

@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation


<PageTitle>Tic-Tac-Toe</PageTitle>

<div class="top-bar">
    <a href="/about" class="nav-btn">About</a>
</div>

<div class="content-wrapper">
    <picture>
        <source srcset="header-image.webp" type="image/webp">
        <img src="header-image.jpg" alt="Welcome" class="header-image">
    </picture>

    <h1>Welcome!</h1>
    <AuthInputComponent IsSignIn="@true"></AuthInputComponent>
       

    <div style="margin-top: 10px;">
        <span >Don't have an account?</span>
        <a href="/signup" class="nav-btn">Sign Up</a>
    </div>
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        var refreshToken = await LocalStorage.GetItemAsync<string>("refreshToken");

        if (!string.IsNullOrEmpty(refreshToken))
        {
            try
            {
                var response = await Http.PostAsJsonAsync("/auth/refresh-access",
                    new RefreshJwtRequest { RefreshToken = refreshToken }
                );

                if (response.IsSuccessStatusCode)
                {   
                    var jwtResponse = await response.Content.ReadFromJsonAsync<JwtResponse>();
                    if (jwtResponse is not null)
                    {
                        await LocalStorage.SetItemAsync("accessToken", jwtResponse.AccessToken);
                        await LocalStorage.SetItemAsync("refreshToken", jwtResponse.RefreshToken);
                        Navigation.NavigateTo($"/user");
                    } 
                    else
                    {
                        await RemoveTokens();
                    }
                }
                else
                {
                    await RemoveTokens();
                }
            }
            catch (Exception)
            {
                await RemoveTokens();
            }
        }
        // try
        // {
        //     var isAccessTokenExist = await LocalStorage.ContainKeyAsync("accessToken");
        //     var isRefreshTokenExist = await LocalStorage.ContainKeyAsync("refreshToken");

        //     if (!isAccessTokenExist && !isRefreshTokenExist)
        //     {
        //         await RemoveTokens();
        //         return;
        //     }

        //     if (!isAccessTokenExist && isRefreshTokenExist)
        //     {
        //         var refreshToken = await LocalStorage.GetItemAsync<string>("refreshToken");
        //         if (string.IsNullOrEmpty(refreshToken))
        //         {
        //             throw new ArgumentNullException(nameof(refreshToken));
        //         }

        //         var response = await Http.PostAsJsonAsync("/auth/refresh-access", new RefreshJwtRequest { RefreshToken = refreshToken });
        //         if (response is null || !response.IsSuccessStatusCode)
        //         {
        //             await RemoveTokens();
        //             return;
        //         }

        //         var jwtResponse = await response.Content.ReadFromJsonAsync<JwtResponse>();
        //         if (jwtResponse is null)
        //         {
        //             await RemoveTokens();
        //             return;
        //         }

        //         await LocalStorage.SetItemAsync("accessToken", jwtResponse.AccessToken);
        //         await LocalStorage.SetItemAsync("refreshToken", jwtResponse.RefreshToken);
        //         Navigation.NavigateTo($"/user", forceLoad: true);
        //         return;
        //     }

        //     Navigation.NavigateTo($"/user", forceLoad: true);
        // }
        // catch (Exception)
        // {
        //     await RemoveTokens();
        // }
    }

    private async Task RemoveTokens()
    {
        await LocalStorage.RemoveItemAsync("accessToken");
        await LocalStorage.RemoveItemAsync("refreshToken");
    }
}